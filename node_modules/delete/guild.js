const ObjectId = require("mongodb").ObjectId;
const fs = require("fs");
const channel = require("class/channel.js");

module.exports = async (session, query) => {
    if (await session.set()) {
        const { guild_id } = query;

        if (await channel.isOwner(guild_id, session.user_id)) {
            const db = await require("class/database.js");
            const find = await db.collection("guilds").aggregate([
                { $match: { _id: ObjectId(guild_id) } },
                { $limit: 1 },
                { $project: { icon: 1, channels: 1 } },
                { $lookup: { from: "emojis", localField: "_id", foreignField: "guild_id", as: "emojis" } },
                { $project: { icon: 1, channels: 1, emojis: { $map: { input: "$emojis", as: "emoji", in: { id: "$$emoji._id", name: "$$emoji.name" } } } } }
            ]).next();

            if (find !== null) {
                const { icon, channels, emojis } = find;
                const promise = await Promise.all([db.collection("guilds").deleteOne({ _id: ObjectId(guild_id) }), db.collection("members").deleteMany({ guild_id: ObjectId(guild_id) }), db.collection("guild_channels").deleteMany({ guild_id: ObjectId(guild_id) }), db.collection("emojis").deleteMany({ guild_id: ObjectId(guild_id) }), db.collection("invites").deleteMany({ guild_id: ObjectId(guild_id) }), db.collection("messages").deleteMany({ channel_id: { $in: channels } })]);

                if (promise[0].deletedCount === 1) {
                    if (icon !== null) {
                        try {
                            fs.unlinkSync(`icons/${icon}`);
                        } catch (error) {
                            console.log(error);
                        }
                    }

                    for (let emoji of emojis) {
                        try {
                            fs.unlinkSync(`emojis/${emoji.id}`);
                        } catch (error) {
                            console.log(error);
                        }
                    }

                    const array = [];
                    const length = channels.length;
                    for (let i = 0; i < length; i++) {
                        array.push(channels[i].toString());
                    }

                    return {
                        status: true,
                        type: "GUILD_DELETE",
                        guild_id: guild_id,
                        channels: array
                    }
                } else {
                    return {
                        status: false,
                        error: "Failed to delete community"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Failed to retrieve current information"
                }
            }
        } else {
            return {
                status: false,
                error: "Missing permissions"
            }
        }
    } else {
        return {
            status: false
        }
    }
}