const ObjectId = require("mongodb").ObjectId;
const channel = require("class/channel.js");

module.exports = async (session, query, message) => {
    if (await session.set()) {
        const { guild_id } = query;

        if (await channel.isOwner(guild_id, session.user_id)) {
            const { name } = message;

            if (channel.isValidName(name)) {
                const db = await require("class/database.js");
                const create = await db.collection("guild_channels").insertOne({ guild_id: ObjectId(guild_id), name: name });

                if (create.insertedCount === 1) {
                    const channel_id = create.insertedId.toString();

                    const result = await db.collection("guilds").findOneAndUpdate({ _id: ObjectId(guild_id) }, { $addToSet: { channels: ObjectId(channel_id) } }, { projection: { _id: 0, channels: 1 } });

                    if (result.value !== null) {
                        return {
                            status: true,
                            type: "GUILD_CHANNEL_CREATE",
                            guild_id: guild_id,
                            access: result.value.channels[0].toString(),
                            channel: {
                                id: channel_id,
                                name: name
                            }
                        }
                    } else {
                        return {
                            status: false,
                            error: "Failed to update"
                        }
                    }
                } else {
                    return {
                        status: false,
                        error: "Failed to create channel"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Invalid name"
                }
            }
        } else {
            return {
                status: false,
                error: "Missing permissions"
            }
        }
    } else {
        return {
            status: false
        }
    }
}