const ObjectId = require("mongodb").ObjectId;
const channel = require("class/channel.js");
const image = require("class/image.js");

module.exports = async (session, message) => {
    if (await session.set()) {
        const { name, file } = message;

        if (channel.isValidName(name)) {
            const db = await require("class/database.js");
            const create = await db.collection("guilds").insertOne({ owner: ObjectId(session.user_id), name: name, icon: null, channels: [] });

            if (create.insertedCount === 1) {
                const guild_id = create.insertedId.toString();
                const promise = await Promise.all([db.collection("members").insertOne({ guild_id: ObjectId(guild_id), member_id: ObjectId(session.user_id) }), db.collection("guild_channels").insertOne({ guild_id: ObjectId(guild_id), name: "chat" })]);

                if (promise[0].insertedCount === 1 && promise[1].insertedCount === 1) {
                    const channel_id = promise[1].insertedId.toString();
                    const filename = await image.save(file, "icons", 256);

                    const result = await db.collection("guilds").updateOne({ _id: ObjectId(guild_id) }, { $addToSet: { channels: ObjectId(channel_id) }, $set: { icon: filename } });

                    if (result.modifiedCount === 1) {
                        return {
                            status: true,
                            type: "GUILD_CREATE",
                            guild: {
                                id: guild_id,
                                name: name,
                                icon: image.url(filename, "icon"),
                                owner: true,
                                channels: [{
                                    id: channel_id,
                                    name: "chat"
                                }],
                                emojis: []
                            }
                        }
                    } else {
                        return {
                            status: false,
                            error: "Failed to update"
                        }
                    }
                } else {
                    await Promise.all([db.collection("members").deleteOne({ guild_id: ObjectId(guild_id) }), db.collection("guild_channels").deleteOne({ guild_id: ObjectId(guild_id) }), db.collection("guilds").deleteOne({ _id: ObjectId(guild_id) })]);
                    return {
                        status: false,
                        error: "Failed to create main channel"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Failed to create community"
                }
            }
        } else {
            return {
                status: false,
                error: "Invalid name"
            }
        }
    } else {
        return {
            status: false
        }
    }
}