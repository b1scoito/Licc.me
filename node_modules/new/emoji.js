const ObjectId = require("mongodb").ObjectId;
const fs = require("fs");
const channel = require("class/channel.js");
const image = require("class/image.js");

module.exports = async (session, query, message) => {
    if (await session.set()) {
        const { guild_id } = query;

        if (await channel.isOwner(guild_id, session.user_id)) {
            const { file } = message;
            const name = message.name.split(".")[0];
            const filename = await image.save(file, "emojis", 128, false);

            if (filename !== null) {
                const db = await require("class/database.js");
                const result = await db.collection("emojis").insertOne({ _id: filename, guild_id: ObjectId(guild_id), name: name });

                if (result.insertedCount === 1) {
                    const find = await db.collection("guilds").findOne({ _id: ObjectId(guild_id) }, { projection: { _id: 0, channels: 1 } });

                    if (find !== null) {
                        return {
                            status: true,
                            type: "GUILD_EMOJI_CREATE",
                            access: find.channels[0].toString(),
                            guild_id: guild_id,
                            emoji: {
                                id: filename,
                                name: name
                            }
                        }
                    } else {
                        return {
                            status: true,
                            type: "GUILD_EMOJI_CREATE",
                            guild_id: guild_id,
                            emoji: {
                                id: filename,
                                name: name
                            }
                        }
                    }
                } else {
                    fs.unlinkSync(`emojis/${filename}`);
                    return {
                        status: false,
                        error: "Failed to update"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Invalid file"
                }
            }
        } else {
            return {
                status: false,
                error: "Missing permissions"
            }
        }
    } else {
        return {
            status: false
        }
    }
}