const ObjectId = require("mongodb").ObjectId;
const check = require("class/check.js");
const image = require("class/image.js");

module.exports = async (session, message) => {
    if (await session.set()) {
        if (typeof message.username === "string") {
            const split = message.username.split("#");

            if (split.length === 2) {
                const username = split[0], tag = split[1];

                if (check.username(username) && check.tag(tag)) {
                    const db = await require("class/database.js");
                    const find = await db.collection("users").findOne({ username: username, tag: tag }, { projection: { avatar: 1 } });

                    if (find !== null) {
                        const user_id = find._id.toString(), avatarURL = image.url(find.avatar, "avatar");

                        if (session.user_id !== user_id) {
                            const count = await db.collection("dm_channels").count({ $or: [ { $and: [ { client: ObjectId(session.user_id) }, { recipient: ObjectId(user_id) } ] }, { $and: [ { client: ObjectId(user_id) }, { recipient: ObjectId(session.user_id) } ] } ] }, { limit: 1 });

                            if (count === 0) {
                                const result = await db.collection("dm_channels").insertOne({ client: ObjectId(session.user_id), recipient: ObjectId(user_id), accepted: false });

                                if (result.insertedCount === 1) {
                                    return {
                                        status: true,
                                        client: {
                                            status: true,
                                            type: "DM_CREATE",
                                            channel: {
                                                id: result.insertedId.toString(),
                                                acceptable: false,
                                                recipient: {
                                                    id: user_id,
                                                    username: username,
                                                    tag: tag,
                                                    avatar: avatarURL
                                                }
                                            }
                                        },
                                        recipient: {
                                            status: true,
                                            type: "DM_CREATE",
                                            channel: {
                                                id: result.insertedId.toString(),
                                                acceptable: true,
                                                recipient: {
                                                    id: session.user_id,
                                                    username: session.username,
                                                    tag: session.tag,
                                                    avatar: session.avatar
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    return {
                                        status: false,
                                        error: "Failed to send friend request"
                                    }
                                }
                            } else {
                                return {
                                    status: false,
                                    error: "You are already friends with this person, or have a pending request"
                                }
                            }
                        } else {
                            return {
                                status: false,
                                error: "Cannot send a friend request to yourself"
                            }
                        }
                    } else {
                        return {
                            status: false,
                            error: "User does not exist"
                        }
                    }
                } else {
                    return {
                        status: false,
                        error: "Invalid username or tag"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Invalid username or tag"
                }
            }
        } else {
            return {
                status: false,
                error: "Username is required"
            }
        }
    } else {
        return {
            status: false
        }
    }
}