const ObjectId = require("mongodb").ObjectId;

class Channel {
    static toObjectId(channel_id) {
        return channel_id === this.EVERYONE ? "000000000000000000000000" : channel_id;
    }

    static isValidId(channel_id) {
        return typeof channel_id === "string" && channel_id.length === 24;
    }

    static isValidName(name) {
        return typeof name === "string" && name.length >= 1 && name.length <= 64;
    }

    static async isOwner(guild_id, user_id) {
        if (this.isValidId(guild_id)) {
            const db = await require("class/database.js");
            const count = await db.collection("guilds").count({ _id: ObjectId(guild_id), owner: ObjectId(user_id) });

            return count === 1;
        }
        return false;
    }

    static async hasDMPermission(channel_id, user_id) {
        if (channel_id === this.EVERYONE) {
            return true;
        } else if (this.isValidId(channel_id)) {
            const db = await require("class/database.js");
            const count = await db.collection("dm_channels").count({ _id: ObjectId(channel_id), $or: [{ client: ObjectId(user_id) }, { recipient: ObjectId(user_id) }] }, { limit: 1 });

            return count === 1;
        }
        return false;
    }

    static async hasGuildPermission(guild_id, channel_id, user_id) {
        if (this.isValidId(guild_id) && this.isValidId(channel_id)) {
            const db = await require("class/database.js");
            const count = await db.collection("members").aggregate([
                { $match: { guild_id: ObjectId(guild_id), member_id: ObjectId(user_id) } },
                { $limit: 1 },
                { $lookup: { from: "guilds", localField: "guild_id", foreignField: "_id", as: "guild" } },
                { $project: { guild: { $arrayElemAt: ["$guild", 0] } } },
                { $project: { allow: { $in: [ObjectId(channel_id), "$guild.channels"] } } }
            ]).next();

            return count !== null ? count.allow : false;
        }
        return false;
    }

    static async markAsRead(channel_id, user_id) {
        const db = await require("class/database.js");
        const result = await db.collection("dm_channels").updateOne({ _id: ObjectId(channel_id), $or: [{ client: ObjectId(user_id) }, { recipient: ObjectId(user_id) }] }, { $set: { unread: null } });

        return result.modifiedCount === 1;
    }

    static async markAsUnread(channel_id, user_id) {
        const db = await require("class/database.js");
        const result = await db.collection("dm_channels").updateOne({ _id: ObjectId(channel_id), $or: [{ client: ObjectId(user_id) }, { recipient: ObjectId(user_id) }] }, { $set: { unread: ObjectId(user_id) } });

        return result.modifiedCount === 1;
    }
}

Channel.EVERYONE = "0";
Channel.DM_CHANNEL = 0;
Channel.TEXT_CHANNEL = 1;
Channel.ACKNOWLEDGEMENT = 2;
module.exports = Channel;