const ObjectId = require("mongodb").ObjectId;
const fs = require("fs");
const channel = require("class/channel.js");
const image = require("class/image.js");

module.exports = async (session, query, message) => {
    if (await session.set()) {
        const { guild_id } = query;

        if (await channel.isOwner(guild_id, session.user_id)) {
            const { file, name } = message;

            const db = await require("class/database.js");
            const find = await db.collection("guilds").findOne({ _id: ObjectId(guild_id) }, { projection: { _id: 0, name: 1, icon: 1 } });

            if (find !== null) {
                const { icon } = find;
                let guild_name = find.name;

                if (channel.isValidName(name)) {
                    guild_name = name;
                }

                const filename = await image.save(file, "icons", 256);
                const result = await db.collection("guilds").findOneAndUpdate({ _id: ObjectId(guild_id) }, { $set: { name: guild_name, icon: filename === null ? icon : filename } }, { projection: { _id: 0, name: 1, icon: 1, channels: 1 } });

                if (result.value !== null) {
                    if (filename !== null) {
                        if (icon !== null) {
                            try {
                                fs.unlinkSync(`icons/${icon}`);
                            } catch (error) {
                                console.log(error);
                            }
                        }
                    }

                    return {
                        status: true,
                        type: "GUILD_UPDATE",
                        access: result.value.channels[0].toString(),
                        guild: {
                            id: guild_id,
                            name: guild_name,
                            icon: image.url(filename !== null ? filename : icon, "icon")
                        }
                    }
                } else {
                    return {
                        status: false,
                        error: "Failed to update"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Failed to retrieve current information"
                }
            }
        } else {
            return {
                status: false,
                error: "Missing permissions"
            }
        }
    } else {
        return {
            status: false
        }
    }
}