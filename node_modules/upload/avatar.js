const ObjectId = require("mongodb").ObjectId;
const fs = require("fs");
const image = require("class/image.js");

module.exports = async (session, message) => {
    if (await session.set()) {
        const { file } = message;

        const db = await require("class/database.js");
        const find = await db.collection("users").findOne({ _id: ObjectId(session.user_id) }, { projection: { _id: 0, avatar: 1 } });

        if (find !== null) {
            const { avatar } = find;
            const filename = await image.save(file, "avatars", 256);

            if (filename !== null) {
                const result = await db.collection("users").updateOne({ _id: ObjectId(session.user_id) }, { $set: { avatar: filename } });

                if (result.modifiedCount === 1) {
                    if (avatar !== null) {
                        try {
                            fs.unlinkSync(`avatars/${avatar}`);
                        } catch (error) {
                            console.log(error);
                        }
                    }
                    return {
                        status: true,
                        avatar: image.url(filename, "avatar"),
                    }
                } else {
                    return {
                        status: false,
                        error: "Failed to save"
                    }
                }
            } else if (filename === null) {
                if (avatar !== null) {
                    try {
                        fs.unlinkSync(`avatars/${avatar}`);
                    } catch (error) {
                        console.log(error);
                    }

                    const result = await db.collection("users").updateOne({ _id: ObjectId(session.user_id) }, { $set: { avatar: null } });

                    if (result.modifiedCount === 1) {
                        return {
                            status: true
                        }
                    } else {
                        return {
                            status: false,
                            error: "Failed to delete"
                        }
                    }
                } else {
                    return {
                        status: false,
                        error: "Nothing to update"
                    }
                }
            }
        } else {
            return {
                status: false,
                error: "Failed to retrieve current avatar"
            }
        }
    } else {
        return {
            status: false
        }
    }
}