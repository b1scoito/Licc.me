const ObjectId = require("mongodb").ObjectId;
const check = require("class/check.js");
const image = require("class/image.js");

module.exports = async (session, message) => {
    if (await session.set()) {
        const { invite } = message;

        if (check.invite(invite)) {
            const db = await require("class/database.js");
            const find = await db.collection("invites").findOne({ _id: invite }, { projection: { _id: 0, guild_id: 1 } });

            if (find !== null) {
                const { guild_id } = find;

                const count = await db.collection("members").count({ guild_id: ObjectId(guild_id), member_id: ObjectId(session.user_id) }, { limit: 1 });

                if (count !== 1) {
                    const create = await db.collection("members").insertOne({ guild_id: ObjectId(guild_id), member_id: ObjectId(session.user_id) });

                    if (create.insertedCount === 1) {
                        const result = await db.collection("guilds").aggregate([
                            { $match: { _id: ObjectId(guild_id) } },
                            { $limit: 1 },
                            { $lookup: { from: "guild_channels", localField: "_id", foreignField: "guild_id", as: "channels" } },
                            { $lookup: { from: "emojis", localField: "_id", foreignField: "guild_id", as: "emojis"} },
                            { $project: { name: 1, icon: 1, channels: { $map: { input: "$channels", as: "channel", in: { id: "$$channel._id", name: "$$channel.name" } } }, emojis: { $map: { input: "$emojis", as: "emoji", in: { id: "$$emoji._id", name: "$$emoji.name" } } } } }
                        ]).next();

                        if (result !== null) {
                            const { channels } = result;

                            const length = channels.length;
                            for (let i = 0; i < length; i++) {
                                const channel = channels[i];
                                channels[i] = {
                                    id: channel.id.toString(),
                                    name: channel.name
                                }
                            }

                            return {
                                status: true,
                                type: "GUILD_CREATE",
                                guild: {
                                    id: result._id.toString(),
                                    name: result.name,
                                    icon: image.url(result.icon, "icon"),
                                    owner: false,
                                    channels: channels,
                                    emojis: result.emojis
                                }
                            }
                        } else {
                            return {
                                status: false,
                                error: "Community does not exist"
                            }
                        }
                    } else {
                        return {
                            status: false,
                            error: "Failed to join"
                        }
                    }
                } else {
                    return {
                        status: false,
                        error: "You are already joined"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Invite does not exist"
                }
            }
        } else {
            return {
                status: false,
                error: "Invalid invite"
            }
        }
    } else {
        return {
            status: false
        }
    }
}