const bcrypt = require("bcryptjs");
const check = require("class/check.js");

module.exports = async (session, message) => {
    if (!(await session.set())) {
        const { username, tag, email, password, verify } = message;

        if (typeof username === "string" && typeof tag === "string" && typeof email === "string" && typeof password === "string" && typeof verify === "string") {
            if (check.username(username) && check.tag(tag)) {
                if (check.email(email)) {
                    if (password.length >= 8 && password === verify) {
                        const db = await require("class/database.js");
                        const count = await db.collection("users").count({ username: username, tag: tag }, { limit: 1 });

                        if (count === 0) {
                            const unique = await db.collection("users").count({ email: email }, { limit: 1 });

                            if (unique === 0) {
                                const hash = await bcrypt.hash(password, 10);
                                const result = await db.collection("users").insertOne({ username: username, tag: tag, email: email, password: hash, avatar: null, date: new Date() });

                                if (result.insertedCount === 1) {
                                    if (await session.create(result.insertedId.toString())) {
                                        return {
                                            status: true,
                                            token: session.token
                                        }
                                    } else {
                                        return {
                                            status: false,
                                            error: "Failed to create session"
                                        }
                                    }
                                } else {
                                    return {
                                        status: false,
                                        error: "Failed to sign up"
                                    }
                                }
                            } else {
                                return {
                                    status: false,
                                    error: "Email is already registered"
                                }
                            }
                        } else {
                            return {
                                status: false,
                                error: "Username/tag pair is already taken"
                            }
                        }
                    } else {
                        return {
                            status: false,
                            error: "Invalid passwords"
                        }
                    }
                } else {
                    return {
                        status: false,
                        error: "Invalid email"
                    }
                }
            } else {
                return {
                    status: false,
                    error: "Invalid username or tag"
                }
            }
        } else {
            return {
                status: false,
                error: "Missing fields"
            }
        }
    } else {
        return {
            status: false,
            error: "Already logged in"
        }
    }
}